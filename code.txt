#includeiostream
#includestring.h
#includemath.h
#includefstream
using namespace std;

typedef unsigned int uint;

int str2int(char str) {               字符串转化为整型 
	if (str == 0) {
		return -1;
	}
	uint num = 0;
	char p = str;
	while (p != 0) {
		num = 10;
		num += p-'0';
		p++;
	}
	return num;
}


class Attr{                            节点属性类 
public
	Attr(char name_, char gender_, char age_) {
		name = new char[strlen(name_)+1];
		strcpy(name, name_);
		age = str2int(age_);
		gender = gender_[0];
	}
	~Attr() {
		delete[] name;
	}
	char getName() {
		return name;
	}
	int getAge() {
		return age;
	}
	char getGender() {
		return gender;
	}
private
	char name;
	int age;
	char gender;
};

class Rela {                           边关系类 
public
	Rela(uint num_) {
		friends = new uint[num_];
		num = num_;
		currentNum = 0;
	}
	~Rela() {
		delete[] friends;
	}
	void add(char id) {
		friends[currentNum] = str2int(id);
		currentNum++;
	}
	uint getFriend(uint index) {
		if (indexnum){
			return friends[index];
		} else{
			return 0;
		}
	}
	uint getNum(){               degree
		return num;
	}
	
private
	uint friends;
	uint num;
	uint currentNum;
};

class ReadFile {                       读取文件 
public
	#define SEP ','
	#define EOL 'n'
	ReadFile(char filename) {
		ifstream fp;
		fp.open(filename);
		
		fp.seekg(0, iosend);
		uint flen = fp.tellg();
		
		content = new char[flen+1];
		for (int i=0; iflen+1; i++) {
			content[i] = 0;
		}
		fp.seekg(0, iosbeg);
		fp.read(content, flen);
		fp.close();
		content[flen] = 0;
		
		blockR = content;
	}
	~ReadFile() {
		delete[] content;
	}
	uint getRowNum() {
		uint rowNum = 0;
		char p = content;
		while (p != 0) {
			if(p == EOL) {
				rowNum++;
			}
			p++;
		}
		return rowNum + 1;
	}
	uint getColNum() {
		if (blockR == EOL  blockR == 0) {
			return 0;
		}
		uint colNum = 0;
		char p = blockR;
		while (p != EOL && p != 0) {
			if(p == SEP) {
				colNum++;
			}
			p++;
		}
		return colNum + 1;
	}
	char getBlock() {
		char blockL = blockR;
		while (1) {
			if (blockR != SEP && blockR != EOL && blockR != 0) {
				blockR++;
			} else {
				blockR = 0;
				blockR++;
				return blockL;
			}
		}
	}
private
	char content;
	char blockR;
};

	
uint ComNeighNum(Rela rela1,Rela rela2){    求公共邻居数 
	uint comNeigh = 0;
	for (int i = 0; i  rela1-getNum(); i++){
		for (int j = 0; j  rela2-getNum(); j++){
			if (rela1-getFriend(i) == rela2-getFriend(j)){
				comNeigh++;
			} 
		}
	}
	return comNeigh;
}

uint ComNeigh(Rela rela1,Rela rela2){      求公共邻居是哪些 
	uint comNeigh;
	comNeigh = new uint[readFile.getRowNum()-1];
	for(int i=0 ; ireadFile.getRowNum()-1 ; i++){
		comNeigh[i] = 0;
	}
	uint index = 0;
	for (int i = 0; i  rela1-getNum(); i++){
		for (int j = 0; j  rela2-getNum(); j++){
			if (rela1-getFriend(i) == rela2-getFriend(j)){
				uint _comNeigh = new uint;
				index ++;
				_comNeigh = rela1-getFriend(i);
				comNeigh[index] = _comNeigh;
				delete _comNeigh;
			}
		}
	}
	return comNeigh;
	delete[] comNeigh;
}

int arraylengh(uint array){           求数组元素个数 
	int sum = 0;	
	for(int i=0;ireadFile.getRowNum()-1;i++)
	{
	   	if(array[i] != 0)
	    sum++;
	}
	return sum;
}


int main() {
	Attr attr;
	{
		ReadFile readFile(seed_attr.txt);
		uint rowNum = readFile.getRowNum();
		attr = new Attr[rowNum];
		for (int i=0; irowNum; i++) {
			attr[i] = new Attr(readFile.getBlock(), readFile.getBlock(), readFile.getBlock());
		}
	}

	coutattr[0]-getName()endl;              测试节点属性 
	coutattr[1]-getAge()endl;
	coutattr[2]-getGender()endl;

	Rela rela;
	{
		ReadFile readFile(seed_rela.txt);
		uint rowNum = readFile.getRowNum();
		rela = new Rela[rowNum];
		for (int i=0; irowNum; i++) {
			uint colNum = readFile.getColNum();
			rela[i] = new Rela(colNum);
			for (int j=0; jcolNum; j++) {
				rela[i]-add(readFile.getBlock());
			}
		}
		uint seed_num = 0;
		uint seed;
		for(int i=0; irowNum; i++){
			if(rela[i]-getNum() == 3  rela[i]-getNum() == 4){
				seed[seed_num] = i;
				seed_num ++;
			}	
		}
		comNeigh(rela[seed[seed_num]],rela[seed[seed_num+1]],)
	}
	
	coutrela[0]-getFriend(4)endl;           测试关系 
	coutrela[1]-getNum()endl;
	
	coutComNeighNum(rela[0],rela[8])endl;    测试公共邻居 
  uint co_Neigh = ComNeigh(rela[0],rela[5]);
  for(int i=1;isizeof(co_Neigh);i++)
		coutco_Neigh[i]endl;
	coutarraylengh(co_Neigh)endl;

	
	return 0;
}